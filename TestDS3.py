# not a malicious thing, just a bot to make fun of my close friends!!
import asyncio  # –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

from pathlib import Path
import time
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Update
from pdfminer.high_level import extract_text  # –î–ª—è PDF
from docx import Document  # –î–ª—è DOCX
import requests
import os
from PERSONAS import Persona, PERSONAS
from telegram import Update
import random
from telegram.ext import filters
from dotenv import load_dotenv
import logging
from collections import defaultdict, deque
from enum import Enum, auto
import base64
from io import BytesIO
from openai import OpenAI

import sys

chat_memories = defaultdict(lambda: deque(maxlen=32))

# Load tokens
load_dotenv()


print("OPENAI_KEY_EXISTS:", "OPENAI_API_KEY" in os.environ)  # Debug line
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))



chat_modes = defaultdict(lambda: "normal")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize bot
app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

# DeepSeek API setup
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
DEEPSEEK_HEADERS = {
    "Authorization": f"Bearer {os.getenv('DEEPSEEK_API_KEY')}",
    "Content-Type": "application/json"
}


# --------------------------------------
# EXACT FUNCTIONS FROM YOUR LIST (NO MORE, NO LESS)
# --------------------------------------

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if not context.args:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: normal, good, phil")
        return

    mode_name = context.args[0].lower()
    try:
        persona = Persona(mode_name)  # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ enum
        chat_modes[chat_id] = persona.value  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É (normal/volodia/etc)
        await update.message.reply_text(f"üîπ –†–µ–∂–∏–º '{persona.value}' –≤–∫–ª—é—á—ë–Ω")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ: " + ", ".join([p.value for p in Persona]))


async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    persona_config = PERSONAS[Persona(chat_modes[chat_id])]

    payload = {
        "model": "deepseek-chat",
        "messages": [
            {
                "role": "system",
                "content": persona_config["system"]
            },
            {
                "role": "user",
                "content": "–ö–∞–∫ –í–ª–∞–¥–∏–º–∏—Ä –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–∏–π, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ (4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏–∑–ª–æ–∂–∏ –û–î–ù–£ —Å–≤–µ–∂—É—é –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –ê–º–µ—Ä–∏–∫–∏ –∏–ª–∏ –ï–≤—Ä–æ–ø—ã, –≤—Å—Ç—Ä–æ–∏–≤ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π/–µ–¥–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç. –§–æ—Ä–º–∞—Ç: [–§–∞–∫—Ç –Ω–æ–≤–æ—Å—Ç–∏], [—Ü–∏–Ω–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑]. [–ï—â—ë –æ–¥–∏–Ω —Ñ–∞–∫—Ç], [—è–∑–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ]"
            }
        ],
        "temperature": persona_config["temperature"]
    }

    response = await call_deepseek(payload)
    await update.message.reply_text(response[:700])


async def wtf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    persona_config = PERSONAS[Persona(chat_modes[chat_id])]

    payload = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "system", "content": persona_config["system"]},
            {"role": "user", "content": "–û–±—ä—è—Å–Ω–∏ —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏ (–º–∞–∫—Å. 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"}
        ],
        "temperature": persona_config["temperature"],
        "max_tokens": 500
    }
    await update.message.reply_text(await call_deepseek(payload))


async def problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É –ø—Ä–æ–±–ª–µ–º—ã")
        return

    chat_id = update.message.chat.id
    user_problem = " ".join(context.args)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    persona_config = PERSONAS[Persona(chat_modes[chat_id])]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º payload
    payload = {
        "model": "deepseek-chat",
        "messages": [
            {
                "role": "system",
                "content": persona_config["system"]
            },
            {
                "role": "user",
                "content": f"–î–∞–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–µ: {user_problem}"
            }
        ],
        "temperature": persona_config["temperature"]
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    response = await call_deepseek(payload)
    await update.message.reply_text(response)


async def fugoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π"""
    chat_id = update.message.chat.id
    target = context.args[0] if context.args and context.args[0].startswith("@") else "–í—Å–µ–º –ø–µ—Ç—É—à–∫–∞–º –≤ —á–∞—Ç–∏–∫–µ"
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–û –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –¥–ª—è {target} (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ù–∞—á–∏–Ω–∞–π —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç –∏ —Å–∞—Ä–∫–∞–∑–º –∏ –∑—É–º–µ—Ä—Å–∫–∏–π –ª–µ–∫—Å–∏–∫–æ–Ω. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏!"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(f"{target}, {await call_deepseek(payload)} üñï")


async def randomeme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º"""
    chat_id = update.message.chat.id
    prompt = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ò–ù —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º/—à—É—Ç–∫—É —Å —Ü–∏–Ω–∏–∑–º–æ–º –∏ —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(await call_deepseek(payload))


async def sych(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞"""
    chat_id = update.message.chat.id
    prompt = "–û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —Ç—è–Ω –Ω–µ –Ω—É–∂–Ω—ã, –∞ –±—ã—Ç—å –æ–¥–∏–Ω–æ–∫–∏–º —Å—ã—á–µ–º - –∫–ª–∞—Å—Å–Ω–æ (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ü–∏–Ω–∏—á–Ω–æ)"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(await call_deepseek(payload))


async def petros(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®—É—Ç–∫–∞ –ü–µ—Ç—Ä–æ—Å—è–Ω–∞"""
    chat_id = update.message.chat.id
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —à—É—Ç–∫—É –≤ —Å—Ç–∏–ª–µ –ï–≤–≥–µ–Ω–∏—è –ü–µ—Ç—Ä–æ—Å—è–Ω–∞ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≥–ª—É–ø–æ –∏ —Å–º–µ—à–Ω–æ)"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(await call_deepseek(payload))


async def putin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–∏—Ç–∞—Ç–∞ –ü—É—Ç–∏–Ω–∞"""
    chat_id = update.message.chat.id
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞ (–º–∞–∫—Å. 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–º–µ–ª–æ –∏ –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–Ω–æ)"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(await call_deepseek(payload))


async def zhir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–∏—Ç–∞—Ç–∞ –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–æ–≥–æ"""
    chat_id = update.message.chat.id
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∑–∫—É—é —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ –í–ª–∞–¥–∏–º–∏—Ä–∞ –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–æ–≥–æ (–º–∞–∫—Å. 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(await call_deepseek(payload))


async def hohly(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –£–∫—Ä–∞–∏–Ω—É"""
    chat_id = update.message.chat.id
    prompt = "–ö—Ä–∞—Ç–∫–æ –∏ —Ü–∏–Ω–∏—á–Ω–æ –æ–±—ä—è—Å–Ω–∏ '—á–µ —Ç–∞–º —É —Ö–æ—Ö–ª–æ–≤' (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(await call_deepseek(payload))


async def sage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ—Å—Ç–æ—á–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å"""
    chat_id = update.message.chat.id
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—á–µ–Ω—å –º—É–¥—Ä—É—é –∏ –≥–ª—É–±–æ–∫—É—é –ø–æ —Å–º—ã—Å–ª—É —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ –≤–æ—Å—Ç–æ—á–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(await call_deepseek(payload))


async def watts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–∏—Ç–∞—Ç–∞ –£–æ—Ç—Ç—Å–∞"""
    chat_id = update.message.chat.id
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫—É—é –∏ –º—É–¥—Ä—É—é —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ —Ñ–∏–ª–æ—Å–æ—Ñ–∞ –ê–ª–∞–Ω–∞ –£–æ—Ç—Ç—Å–∞ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    await update.message.reply_text(await call_deepseek(payload))


# --------------------------------------
# UTILITY FUNCTION
# --------------------------------------
def build_prompt(
        chat_id: int,
        user_input: str,
        persona_name: str,
        chat_history: deque = None
) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç payload –¥–ª—è DeepSeek API.

    Args:
        chat_id: ID —á–∞—Ç–∞ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
        user_input: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        persona_name: –û–¥–∏–Ω –∏–∑ Persona (normal, volodia –∏ —Ç.–¥.)
        chat_history: –û—á–µ—Ä–µ–¥—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç –∏–∑ chat_memories)

    Returns:
        –ì–æ—Ç–æ–≤—ã–π payload –¥–ª—è call_deepseek
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    persona = PERSONAS.get(Persona(persona_name), PERSONAS[Persona.NORMAL])  # fallback –Ω–∞ normal

    # –ë–µ—Ä–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —è–≤–Ω–æ)
    history = chat_history if chat_history is not None else chat_memories[chat_id]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    formatted_history = "\n".join(
        f"{i}. {msg}" for i, msg in enumerate(history, 1)
    ) if history else "–ò—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç"

    # –°–æ–±–∏—Ä–∞–µ–º system-–ø—Ä–æ–º–ø—Ç
    system_prompt = persona["system"].format(
        chat_history=formatted_history,
        user_input=user_input
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π payload
    return {
        "model": "deepseek-chat",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_input}
        ],
        "temperature": persona["temperature"],
        "max_tokens": 700,
        "frequency_penalty": 1
    }


async def call_deepseek(payload: dict) -> str:
    """Call DeepSeek API with nuclear-grade quote prevention"""
    try:
        response = requests.post(
            DEEPSEEK_API_URL,
            headers=DEEPSEEK_HEADERS,
            json=payload,
            timeout=20  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        )
        response.raise_for_status()

        raw_text = response.json()['choices'][0]['message']['content'].strip()

        # Strip edge quotes only
        if raw_text.startswith(('"', "'", "¬´")):
            raw_text = raw_text[1:]
        if raw_text.endswith(('"', "'", "¬ª")):
            raw_text = raw_text[:-1]

        return raw_text or "–ß—Ç–æ-—Ç–æ –Ω–µ –≤—ã—à–ª–æ. –î–∞–≤–∞–π –µ—â–µ."  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ–ª–±–µ–∫

    except requests.exceptions.RequestException as e:
        logger.error(f"API Error: {e}")
        if isinstance(e, requests.exceptions.Timeout):
            return "–°–µ—Ä–≤–µ—Ä –±–∞—Ä–∞—Ö–ª–∏—Ç. –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç—É."  # –°—Ç–∞—Ä–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞
        if response.status_code == 429:  # type: ignore
            return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Å—Ç—ã–Ω—å."
        return "API —Å–¥–æ—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    except Exception as e:
        logger.critical(f"Critical: {e}")
        return "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–æ–π... –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –≤ OpenAI."  # –°—Ç–∞—Ä—ã–π —Ñ–æ–ª–±–µ–∫


    # --------------------------------------


# GROUP MENTION HANDLER (SPECIAL CASE)
# --------------------------------------

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    chat_type = update.message.chat.type
    is_private = chat_type == "private"

    # –ù–æ–≤–æ–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–ø–ª–∞–π –±–æ—Ç—É
    is_reply_to_bot = (
            not is_private
            and update.message.reply_to_message
            and update.message.reply_to_message.from_user.id == context.bot.id
    )

    # –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≥—Ä—É–ø–ø
    if not is_private and not is_reply_to_bot:
        if not context.bot.username:
            return

        bot_username = context.bot.username.lower()
        message_text = update.message.text.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò @mention –ò–õ–ò —Ä–µ–ø–ª–∞–π
        if f"@{bot_username}" not in message_text.split():  # ‚Üê –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            return  # –ù–æ —Ç–µ–ø–µ—Ä—å is_reply_to_bot —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ

    # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat_id = update.message.chat.id
    user_id = update.effective_user.id
    memory_key = (chat_id, user_id)

    if memory_key not in chat_memories:
        chat_memories[memory_key] = []

    chat_memories[memory_key].append(update.message.text)

    context_messages = "\n".join(chat_memories[memory_key])
    prompt = (
        f"Context (last messages):\n{context_messages}\n\n"
        f"New message: {update.message.text}\n\n"
        "–û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    )

    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    response = await call_deepseek(payload)
    await update.message.reply_text(response)


async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message.from_user.id == context.bot.id:
        return

    chat_id = update.message.chat.id
    user_id = update.effective_user.id
    memory_key = (chat_id, user_id)

    chat_memories[memory_key].append(update.message.text)

    context_messages = "\n".join(chat_memories[memory_key])
    prompt = f"Context:\n{context_messages}\n\nReply to: {update.message.text}"

    payload = build_prompt(chat_id, prompt, chat_modes[chat_id])
    response = await call_deepseek(payload)
    await update.message.reply_text(response)


async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # IMMEDIATELY skip all photo-type documents
    # if update.message.photo or (update.message.document and update.message.document.mime_type.startswith('image/')):
    #     return
    if update.message.photo or (update.message.document and update.message.document.mime_type.startswith('image/')):
        await handle_image(update, context)  # Send to image handler
        return  # Exit to avoid double-processing

    if os.name == 'nt':  # –¢–æ–ª—å–∫–æ –¥–ª—è Windows
        os.makedirs('/tmp/', exist_ok=True)

    """Process ONLY PDF/DOCX/TXT/CSV files (strictly ignores images)"""
    # 1. Early exit for non-documents or images
    if not update.message.document:
        return  # Let other handlers process it

    if update.message.photo:
        return  # handle_image() will catch this

    if (update.message.document
            and update.message.document.mime_type.startswith('image/')
            and not update.message.photo):
        await handle_image(update, context)  # Force-process as image
        return

    # 2. Validate file type
    ALLOWED_EXTENSIONS = [".pdf", ".docx", ".txt", ".csv"]
    try:
        file_ext = os.path.splitext(update.message.document.file_name)[1].lower()
    except AttributeError:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞.")
        return

    if file_ext not in ALLOWED_EXTENSIONS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ PDF/DOCX/TXT/CSV.")
        return

    # 3. Download and process
    progress_msg = await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    file_path = f"/tmp/{int(time.time())}_{update.message.document.file_name}"

    try:
        # NEW: Retry download up to 3 times
        for attempt in range(3):
            try:
                telegram_file = await update.message.document.get_file()
                await telegram_file.download_to_drive(custom_path=file_path)
                if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                    break
                elif attempt == 2:
                    await progress_msg.edit_text("üí• –§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è.")
                    return
            except Exception as e:
                if attempt == 2:
                    await progress_msg.edit_text("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")
                    return
                await asyncio.sleep(1)

        # NEW: Validate DOCX structure before processing
        if file_ext == ".docx":
            from zipfile import ZipFile
            with ZipFile(file_path) as z:
                if 'word/document.xml' not in z.namelist():
                    await progress_msg.edit_text("‚ùå –§–∞–π–ª DOCX –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
                    return
        # Parse content
        text = ""
        if file_ext == ".pdf":
            # from pdfminer.high_level import extract_text
            # text = extract_text(file_path)
            # if not text.strip():
            #     await progress_msg.edit_text("ü§∑‚Äç‚ôÇÔ∏è PDF –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
            #     return

            from pdfminer.high_level import extract_text
            try:
                text = extract_text(file_path)  # Let it fail naturally
            except Exception as e:
                logger.error(f"PDF Error: {e}")
                await progress_msg.edit_text("ü§ñ –ù–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å PDF (–ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª)")
                return
        elif file_ext == ".docx":
            from docx import Document
            doc = Document(file_path)
            text = "\n".join(p.text for p in doc.paragraphs if p.text)
        elif file_ext in (".txt", ".csv"):
            with open(file_path, "r", encoding="utf-8") as f:
                text = f.read(3000)  # Limit read for large files

        if not text.strip():
            await progress_msg.edit_text("ü§∑‚Äç‚ôÇÔ∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã–π.")
            return

        payload = build_prompt(
            chat_id=update.message.chat.id,
            user_input=f"–†–µ–∑—é–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):\n{text}",
            persona_name=chat_modes[update.message.chat.id]
        )
        summary = await call_deepseek(payload)
        await progress_msg.edit_text(f"üìÑ –í—ã–≤–æ–¥:\n{summary[:1000]}")  # Truncate long output

    except Exception as e:
        logger.error(f"FILE ERROR: {str(e)}", exc_info=True)
        await progress_msg.edit_text("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")

    finally:
        if os.path.exists(file_path):
            os.remove(file_path)


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle images with custom user prompts"""
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        # Get image
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = BytesIO()
        await photo_file.download_to_memory(out=photo_bytes)
        base64_image = base64.b64encode(photo_bytes.getvalue()).decode('utf-8')

        # Get user's question
        user_question = (
                update.message.caption or
                (update.message.reply_to_message.text if update.message.reply_to_message else None) or
                "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "  # Default
        )

        # Build prompt
        persona = Persona(chat_modes[update.message.chat.id])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—Ä—Å–æ–Ω—É
        persona_config = PERSONAS[persona]  # –ë–µ—Ä–µ–º –µ—ë –∫–æ–Ω—Ñ–∏–≥

        prompt_text = (
            f"{persona_config['system']}\n\n"  # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –ø–µ—Ä—Å–æ–Ω—ã
            f"–ó–∞–ø—Ä–æ—Å: {user_question}\n\n"
            "–û—Ç–≤–µ—Ç—å –≤ —Å–≤–æ—ë–º —Å—Ç–∏–ª–µ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        )
        # Process
        processing_msg = await update.message.reply_text("–†–∞–∑–≥–ª—è–¥—ã–≤–∞—é")
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}",
                            "detail": "low"
                        }
                    }
                ]
            }],
            max_tokens=250
        )

        # Send result
        analysis = response.choices[0].message.content
        await processing_msg.edit_text(analysis[:1000])

    except Exception as e:
        logger.error(f"Image error: {e}")
        await update.message.reply_text("–ß—ë—Ç –Ω–µ –≤—ã—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")


async def group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Check for either @mention OR reply-to-bot
    bot_username = context.bot.username.lower()
    is_reply_to_bot = (
            update.message.reply_to_message and
            update.message.reply_to_message.from_user.id == context.bot.id
    )
    has_mention = (
            (update.message.text and f"@{bot_username}" in update.message.text.lower()) or
            (update.message.caption and f"@{bot_username}" in update.message.caption.lower())
    )

    if not (is_reply_to_bot or has_mention):
        return  # Ignore normal group messages

    # Route to appropriate handler
    if update.message.photo:
        await handle_image(update, context)
    elif update.message.document:
        await handle_file(update, context)
    else:
        # === –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ===
        payload = build_prompt(
            chat_id=update.message.chat.id,
            user_input=update.message.text,
            persona_name=chat_modes[update.message.chat.id]
        )
        response = await call_deepseek(payload)
        await update.message.reply_text(response)
    # --------------------------------------


# REGISTER ALL COMMANDS
# --------------------------------------
commands = [
    ("news", news),
    ("wtf", wtf),
    ("problem", problem),
    ("fugoff", fugoff),
    ("randomeme", randomeme),
    ("sych", sych),
    ("putin", putin),
    ("zhir", zhir),
    ("hohly", hohly),
    ("sage", sage),
    ("watts", watts),
    ("mode", set_mode),
    ("petros", petros)
]

for cmd, handler in commands:
    app.add_handler(CommandHandler(cmd, handler))

# ===== 1. PRIVATE CHAT HANDLER (keep) =====
app.add_handler(MessageHandler(
    filters.ChatType.PRIVATE & (filters.TEXT | filters.PHOTO | filters.Document.ALL),
    lambda update, ctx: (
        handle_image(update, ctx) if update.message.photo else
        handle_file(update, ctx) if update.message.document else
        handle_mention(update, ctx)
    )
))

# ===== 2. GROUP CHAT HANDLER (REPLACE with this) =====
app.add_handler(MessageHandler(
    filters.ChatType.GROUPS & (filters.TEXT | filters.PHOTO | filters.Document.ALL),
    group_handler  # Your custom function that checks @mentions
))

# ===== 3. REPLY HANDLER (keep one) =====
app.add_handler(MessageHandler(
    filters.TEXT & filters.REPLY,
    handle_reply
))

if __name__ == "__main__":
    print("‚ö° Helper –∑–∞–ø—É—â–µ–Ω —Å —Ç–æ—á–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π")
    app.run_polling()
