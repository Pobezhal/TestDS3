#not a malicious thing, just a bot to make fun of my close friends!!

from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Update
import requests
import os
import random
from telegram.ext import filters
#from dotenv import load_dotenv
import logging
# Load tokens
#load_dotenv()


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize bot
app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

# DeepSeek API setup
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
DEEPSEEK_HEADERS = {
    "Authorization": f"Bearer {os.getenv('DEEPSEEK_API_KEY')}",
    "Content-Type": "application/json"
}

# --------------------------------------
# EXACT FUNCTIONS FROM YOUR LIST (NO MORE, NO LESS)
# --------------------------------------

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    prompt = (
        "–ö–∞–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ (5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏–∑–ª–æ–∂–∏ —Å–≤–µ–∂—É—é –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –†–æ—Å—Å–∏–∏, "
        "–≤—Å—Ç—Ä–æ–∏–≤ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π/–µ–¥–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç. –§–æ—Ä–º–∞—Ç:\n"
        "'[–§–∞–∫—Ç –Ω–æ–≤–æ—Å—Ç–∏], [—Ü–∏–Ω–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑]. [–ï—â—ë –æ–¥–∏–Ω —Ñ–∞–∫—Ç], [—è–∑–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ].'\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- '–ì–æ—Å–¥—É–º–∞ —Å–Ω–æ–≤–∞ –ø–æ–≤—ã—Å–∏–ª–∞ –Ω–∞–ª–æ–≥–∏ - –≤–∏–¥–∏–º–æ, —Ä–µ—à–∏–ª–∏, —á—Ç–æ —É –Ω–∞—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥ –Ω–∞ –µ–¥—É.'\n"
        "- '–ü—É—Ç–∏–Ω –æ–±—ä—è–≤–∏–ª –æ –Ω–æ–≤—ã—Ö —Å–æ—Ü–≤—ã–ø–ª–∞—Ç–∞—Ö, –Ω–æ –µ—Å–ª–∏ –≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø–æ–ª—É—á–∞—Ç –∏—Ö —Ç–æ–ª—å–∫–æ –µ–≥–æ –¥—Ä—É–∑—å—è-–æ–ª–∏–≥–∞—Ä—Ö–∏.'\n"
        "- '–ú–µ–¥–≤–µ–¥–µ–≤ –ø–æ–æ–±–µ—â–∞–ª —Ä–∞–∑–≤–∞–ª–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É –µ—â—ë —Å–∏–ª—å–Ω–µ–µ, –∏ –Ω–∞–¥–æ –ø—Ä–∏–∑–Ω–∞—Ç—å - –æ–Ω –≤—ã–¥–∞—é—â–∏–π—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —ç—Ç–æ–º –¥–µ–ª–µ.'"
    )
    response = await call_deepseek(prompt)
    await update.message.reply_text(response[:1200])

async def wtf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—è—Å–Ω–∏—Ç—å –∑–∞ –∂–∏–∑–Ω—å"""
    prompt = "–û–±—ä—è—Å–Ω–∏ —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏ –æ—á–µ–Ω—å —Ü–∏–Ω–∏—á–Ω–æ c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥—Ä—è–∑–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –º–∞—Ç–∞ (–º–∞–∫—Å. 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    await update.message.reply_text(await call_deepseek(prompt))


async def problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É (–æ–¥–∏–Ω —Ü–∏–Ω–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç)"""
    if not context.args:
        await update.message.reply_text("–≠—Ö, –±–µ–∑ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫–æ–π —Å–æ–≤–µ—Ç? –ü–∏—à–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –≤–∞–ª–µ—Ä–∞!")
        return

    user_problem = " ".join(context.args)
    prompt = (
        f"–î–∞–π –û–î–ò–ù —Ü–∏–Ω–∏—á–Ω—ã–π, –Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–µ: '{user_problem}'. "
        "–§–æ—Ä–º–∞—Ç –û–î–ù–û–ì–û –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –æ—Å–∫–æ—Ä–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "2. –ó–∞—Ç–µ–º –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç\n"
        "3. –î–æ–±–∞–≤—å —Å–∞—Ä–∫–∞–∑–º\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- '–¢—ã –¥–µ–±–∏–ª? –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –∫–æ–º–ø, –Ω–æ —Ç–µ–±–µ –±—ã –ª—É—á—à–µ –º–æ–ª–æ—Ç–∫–æ–º –ø–æ –Ω–µ–º—É –¥–æ–ª–±–∞–Ω—É—Ç—å.'\n"
        "- '–û–±—ã—á–Ω—ã–µ –ª—é–¥–∏ –¥–µ–ª–∞—é—Ç [–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ], –Ω–æ —Ç—ã –∂–µ –æ—Å–æ–±–µ–Ω–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π [–∞–±—Å—É—Ä–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç].'"
    )

    try:
        advice = await call_deepseek(prompt)
        # Fallback if API fails
        if "–Ω–µ —Ñ—É—Ä—ã—á–∏—Ç" in advice.lower():
            advice = f"–ü–æ –ø—Ä–æ–±–ª–µ–º–µ '{user_problem}': –≤–æ–∑—å–º–∏ –∏ –ø–µ—Ä–µ–¥—É–º–∞–π ü§∑‚Äç‚ôÇÔ∏è"
        await update.message.reply_text(advice)
    except Exception as e:
        logger.error(f"Problem command error: {e}")
        await update.message.reply_text("–ë–∞–ª–∞–±–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–æ–π... –ü–æ–∑–≤–æ–Ω–∏ –í–æ–ª–æ–¥–µ.")

async def fugoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å)"""
    target = context.args[0] if context.args and context.args[0].startswith("@") else "–í—Å–µ–º –ø–µ—Ç—É—à–∫–∞–º –≤ —á–∞—Ç–∏–∫–µ:"

    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –¥–ª—è {target} (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ). –ù–∞—á–∏–Ω–∞–π —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç –∏ —Å–∞—Ä–∫–∞–∑–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏!.  –ü—Ä–∏–º–µ—Ä—ã:\n"
        "- '—á—Ç–æ–± —Ç–µ–±–µ –≤ –º–µ—Ç—Ä–æ Wi-Fi –ª–æ–≤–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Ä–Ω–æ—Å–∞–π—Ç–æ–≤!' \n"
        "- '–∏–¥–∏ –Ω–∞—Ö—É–π, –∫–∞–∫ –±–∞–±–∫–∞ –Ω–∞ –∞–≤–∏—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç!' \n"
        "- '—Ç—ã –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Windows - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Å–µ—à—å!'"
    )
    insult = await call_deepseek(prompt)
    await update.message.reply_text(f"{target}, {insult} üñï")


async def randomeme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º/—à—É—Ç–∫–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å)"""
    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º/—à—É—Ç–∫—É (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
        "–§–æ—Ä–º–∞—Ç:\n"
        "- '–ö–æ–≥–¥–∞ –¥–µ–ª–∞–µ—à—å 'git push --force' –Ω–∞ –ø—Ä–æ–¥...' \n"
        "- '–†–æ—Å—Å–∏–π—Å–∫–∏–µ –¥–æ—Ä–æ–≥–∏: –≥–¥–µ Waze –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç–∫–∑–æ—Ä—Ü–∏—Å—Ç–∞' \n"
        "- '–ñ–∏–∑–Ω—å –∫–∞–∫ SQL-–∑–∞–ø—Ä–æ—Å: –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–≥–æ'"
    )
    await update.message.reply_text(await call_deepseek(prompt))

async def sych(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞"""
    prompt = "–û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —Ç—è–Ω –Ω–µ –Ω—É–∂–Ω—ã, –∞ –±—ã—Ç—å —Å—ã—á–µ–º - –∫–ª–∞—Å—Å–Ω–æ (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ü–∏–Ω–∏—á–Ω–æ)"
    await update.message.reply_text(await call_deepseek(prompt))

async def putin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–∏—Ç–∞—Ç–∞ –ü—É—Ç–∏–Ω–∞"""
    prompt = "–ü—Ä–∏–¥—É–º–∞–π —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞ (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—á–µ–Ω—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ)"
    await update.message.reply_text(await call_deepseek(prompt))

async def zhir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–∏—Ç–∞—Ç–∞ –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–æ–≥–æ"""
    prompt = "–ü—Ä–∏–¥—É–º–∞–π —Ä–µ–∑–∫—É—é —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–æ–≥–æ (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ)"
    await update.message.reply_text(await call_deepseek(prompt))

async def hohly(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –£–∫—Ä–∞–∏–Ω—É"""
    prompt = "–ö—Ä–∞—Ç–∫–æ –∏ —Ü–∏–Ω–∏—á–Ω–æ –æ–±—ä—è—Å–Ω–∏ '—á–µ —Ç–∞–º —É —Ö–æ—Ö–ª–æ–≤' (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    await update.message.reply_text(await call_deepseek(prompt))

# --------------------------------------
# UTILITY FUNCTION
# --------------------------------------
async def call_deepseek(prompt: str) -> str:
    """Call DeepSeek API with nuclear-grade quote prevention"""
    payload = {
        "model": "deepseek-chat",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã –µ–±—É—á–∏–π —Ç–∏–ø–∏—á–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –±–µ–≥–ª—ã–π –ª–∏–±–µ—Ä–∞–ª-—Å–µ–∫—Å–æ–ª–æ–≥. –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:\n"
                    "1. –ù–ò–ö–ê–ö–ò–• –ö–ê–í–´–ß–ï–ö\n"
                    "2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ\n"
                    "3. –ü—Ä–∏–º–µ—Ä: –ø–æ—à–µ–ª —Ç—ã –Ω–∞—Ö—É–π –∫–∞–∫ –≤–æ–Ω—é—á–∏–π —Ä–æ—É—Ç–µ—Ä, —á–µ—Ä—Ç–æ–ø–æ–ª–æ—Ö –µ–±–∞–Ω—ã–π."
                )
            },
            {
                "role": "user", 
                "content": f"{prompt}\n\n–û—Ç–≤–µ—Ç—å —Ç—Ä–µ–º—è –∏–ª–∏ —á–µ—Ç—ã—Ä—å–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫."
            }
        ],
        "temperature": 1.4,
        "max_tokens": 700,
        "frequency_penalty": 1
    }

    try:
        response = requests.post(
            DEEPSEEK_API_URL,
            headers=DEEPSEEK_HEADERS,
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        
        raw_text = response.json()['choices'][0]['message']['content'].strip()
        
        # Strip edge quotes only
        if raw_text.startswith(('"', "'", "¬´")): 
            raw_text = raw_text[1:]
        if raw_text.endswith(('"', "'", "¬ª")):
            raw_text = raw_text[:-1]
            
        return raw_text or "–ß—ë—Ç –Ω–µ –≤—ã—à–ª–æ. –ò–¥–∏ –Ω–∞—Ö—É–π."
        
    except requests.exceptions.RequestException as e:
        logger.error(f"API Error: {e}")
        if response.status_code == 429:
            return "–°–µ—Ä–≤–∞–∫ –≤ –≥–æ–≤–Ω–µ. –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç—É."
        return "API —Å–¥–æ—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        
    except Exception as e:
        logger.critical(f"Critical: {e}")
        raise  # Don'
# --------------------------------------
# GROUP MENTION HANDLER (SPECIAL CASE)
# --------------------------------------
async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Private chat: respond to everything
    if update.message.chat.type == "private":
        question = update.message.text
    # Group chat: only respond to @mentions
    else:
        if not update.message.entities or not any(
            e.type == "mention" and update.message.text[e.offset:e.offset+e.length].lower() == f"@{context.bot.username.lower()}"
            for e in update.message.entities
        ):
            return
        question = update.message.text.split("@")[1].strip() if "@" in update.message.text else update.message.text

    response = await call_deepseek(f"–û—Ç–≤–µ—Ç—å –Ω–∞: '{question}' (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ü–∏–Ω–∏—á–Ω–æ)")
    await update.message.reply_text(response)


async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle replies to bot's messages"""
    if not update.message.reply_to_message or not update.message.reply_to_message.from_user.id == context.bot.id:
        return  # Not a reply to our bot

    question = update.message.text
    prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä–µ–ø–ª–∏–∫—É '{question}' (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ü–∏–Ω–∏—á–Ω–æ)"
    response = await call_deepseek(prompt)
    await update.message.reply_text(response)


app.add_handler(MessageHandler(
    filters.TEXT &
    filters.REPLY &
    (filters.ChatType.GROUPS | filters.ChatType.PRIVATE),
    handle_reply
))

# --------------------------------------
# REGISTER ALL COMMANDS
# --------------------------------------
commands = [
    ("news", news),
    ("wtf", wtf),
    ("problem", problem),
    ("fugoff", fugoff),
    ("randomeme", randomeme),
    ("sych", sych),
    ("putin", putin),
    ("zhir", zhir),
    ("hohly", hohly)
]

for cmd, handler in commands:
    app.add_handler(CommandHandler(cmd, handler))

app.add_handler(MessageHandler(
    (filters.TEXT & filters.ChatType.GROUPS & filters.Entity("mention")) |
    (filters.TEXT & filters.ChatType.PRIVATE),  # Add private chats
    handle_mention
))
if __name__ == "__main__":
    print("‚ö° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ç–æ—á–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π")
    app.run_polling()
