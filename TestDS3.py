#not a malicious thing, just a bot to make fun of my close friends!!
import time
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Update
import requests
import os
from telegram import Update
import random
from telegram.ext import filters
#from dotenv import load_dotenv
import logging
from collections import defaultdict, deque
from enum import Enum, auto
import base64
from io import BytesIO
from openai import OpenAI

import sys




chat_memories = defaultdict(lambda: deque(maxlen=32))

# Load tokens
#load_dotenv()



print("OPENAI_KEY_EXISTS:", "OPENAI_API_KEY" in os.environ)  # Debug line
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))



class BotMode(Enum):
    NORMAL = auto()
    VOLODYA = auto()
    
current_mode = BotMode.NORMAL

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize bot
app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

# DeepSeek API setup
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
DEEPSEEK_HEADERS = {
    "Authorization": f"Bearer {os.getenv('DEEPSEEK_API_KEY')}",
    "Content-Type": "application/json"
}

# --------------------------------------
# EXACT FUNCTIONS FROM YOUR LIST (NO MORE, NO LESS)
# --------------------------------------

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_mode
    if context.args and context.args[0].lower() == "volodya":
        current_mode = BotMode.VOLODYA
        await update.message.reply_text("üîπ –†–µ–∂–∏–º '–í–æ–ª–æ–¥—è': –≤–∫–ª—é—á–µ–Ω–∞ —ç–º–ø–∞—Ç–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –°—ç–∫–æ–Ω–æ–º–∏—Ç–µ 5000.")
    else:
        current_mode = BotMode.NORMAL
        await update.message.reply_text("üî∏ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –û—Ö–æ—Ç–∞ –ö—Ä–µ–ø–∫–æ–µ –∏–∑ –∫–∏–æ—Å–∫–∞")


async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    prompt = (
        "–ö–∞–∫ –í–ª–∞–¥–∏–º–∏—Ä –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–∏–π, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ (4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏–∑–ª–æ–∂–∏ –û–î–ù–£ —Å–≤–µ–∂—É—é –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –ê–º–µ—Ä–∏–∫–∏ –∏–ª–∏ –ï–≤—Ä–æ–ø—ã, "
        "–≤—Å—Ç—Ä–æ–∏–≤ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π/–µ–¥–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç. –§–æ—Ä–º–∞—Ç:\n"
        "'[–§–∞–∫—Ç –Ω–æ–≤–æ—Å—Ç–∏], [—Ü–∏–Ω–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑]. [–ï—â—ë –æ–¥–∏–Ω —Ñ–∞–∫—Ç], [—è–∑–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ].'\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- '–ì–æ—Å–¥—É–º–∞ —Å–Ω–æ–≤–∞ –ø–æ–≤—ã—Å–∏–ª–∞ –Ω–∞–ª–æ–≥–∏ - –≤–∏–¥–∏–º–æ, —Ä–µ—à–∏–ª–∏, —á—Ç–æ —É –Ω–∞—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥ –Ω–∞ –µ–¥—É.'\n"
        "- '–ü—É—Ç–∏–Ω –æ–±—ä—è–≤–∏–ª –æ –Ω–æ–≤—ã—Ö —Å–æ—Ü–≤—ã–ø–ª–∞—Ç–∞—Ö, –Ω–æ –µ—Å–ª–∏ –≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø–æ–ª—É—á–∞—Ç –∏—Ö —Ç–æ–ª—å–∫–æ –µ–≥–æ –¥—Ä—É–∑—å—è-–æ–ª–∏–≥–∞—Ä—Ö–∏.'\n"
        "- '–ú–µ–¥–≤–µ–¥–µ–≤ –ø–æ–æ–±–µ—â–∞–ª —Ä–∞–∑–≤–∞–ª–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É –µ—â—ë —Å–∏–ª—å–Ω–µ–µ, –∏ –Ω–∞–¥–æ –ø—Ä–∏–∑–Ω–∞—Ç—å - –æ–Ω –≤—ã–¥–∞—é—â–∏–π—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —ç—Ç–æ–º –¥–µ–ª–µ.'"
    )
    response = await call_deepseek(prompt)
    await update.message.reply_text(response[:700])

async def wtf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—è—Å–Ω–∏—Ç—å –∑–∞ –∂–∏–∑–Ω—å"""
    prompt = "–û–±—ä—è—Å–Ω–∏ —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏ –æ—á–µ–Ω—å —Ü–∏–Ω–∏—á–Ω–æ c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥—Ä—è–∑–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –º–∞—Ç–∞ (–º–∞–∫—Å. 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    await update.message.reply_text(await call_deepseek(prompt))


async def problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É (–æ–¥–∏–Ω —Ü–∏–Ω–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç)"""
    if not context.args:
        await update.message.reply_text("–≠—Ö, –±–µ–∑ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫–æ–π —Å–æ–≤–µ—Ç? –ü–∏—à–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –í–∞–ª–µ—Ä–∞!")
        return

    user_problem = " ".join(context.args)
    prompt = (
        f"–î–∞–π –û–î–ò–ù —Ü–∏–Ω–∏—á–Ω—ã–π, –Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–µ: '{user_problem}'. "
        "–§–æ—Ä–º–∞—Ç –û–î–ù–û–ì–û –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –æ—Å–∫–æ—Ä–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "2. –ó–∞—Ç–µ–º –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç\n"
        "3. –î–æ–±–∞–≤—å —Å–∞—Ä–∫–∞–∑–º\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- '–¢—ã –¥–µ–±–∏–ª? –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –∫–æ–º–ø, –Ω–æ —Ç–µ–±–µ –±—ã –ª—É—á—à–µ –º–æ–ª–æ—Ç–∫–æ–º –ø–æ –Ω–µ–º—É –¥–æ–ª–±–∞–Ω—É—Ç—å.'\n"
        "- '–û–±—ã—á–Ω—ã–µ –ª—é–¥–∏ –¥–µ–ª–∞—é—Ç [–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ], –Ω–æ —Ç—ã –∂–µ –æ—Å–æ–±–µ–Ω–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π [–∞–±—Å—É—Ä–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç].'"
    )

    try:
        advice = await call_deepseek(prompt)
        # Fallback if API fails
        if "–Ω–µ —Ñ—É—Ä—ã—á–∏—Ç" in advice.lower():
            advice = f"–ü–æ –ø—Ä–æ–±–ª–µ–º–µ '{user_problem}': –≤–æ–∑—å–º–∏ –∏ –ø–µ—Ä–µ–¥—É–º–∞–π ü§∑‚Äç‚ôÇÔ∏è"
        await update.message.reply_text(advice)
    except Exception as e:
        logger.error(f"Problem command error: {e}")
        await update.message.reply_text("–ë–∞–ª–∞–±–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–æ–π... –ü–æ–∑–≤–æ–Ω–∏ –í–æ–ª–æ–¥–µ.")

async def fugoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å)"""
    target = context.args[0] if context.args and context.args[0].startswith("@") else "–í—Å–µ–º –ø–µ—Ç—É—à–∫–∞–º –≤ —á–∞—Ç–∏–∫–µ"

    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–û –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –¥–ª—è {target} (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ù–∞—á–∏–Ω–∞–π —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç –∏ —Å–∞—Ä–∫–∞–∑–º –∏ –∑—É–º–µ—Ä—Å–∫–∏–π –ª–µ–∫—Å–∏–∫–æ–Ω. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏!.  –ü—Ä–∏–º–µ—Ä—ã:\n"
        "1. '—á—Ç–æ–± —Ç–µ–±–µ –≤ –º–µ—Ç—Ä–æ Wi-Fi –ª–æ–≤–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Ä–Ω–æ—Å–∞–π—Ç–æ–≤!' \n"
        "2 '–∏–¥–∏ –Ω–∞—Ö—É–π, –∫–∞–∫ –±–∞–±–∫–∞ –Ω–∞ –∞–≤–∏—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç!' \n"
        "3. '—Ç—ã –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Windows - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Å–µ—à—å!'"
    )
    insult = await call_deepseek(prompt)
    await update.message.reply_text(f"{target}, {insult} üñï")


async def randomeme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º/—à—É—Ç–∫–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å)"""
    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ò–ù —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º/—à—É—Ç–∫—É —Å —Ü–∏–Ω–∏–∑–º–æ–º –∏ —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "1. –ö–æ–≥–¥–∞ –¥–µ–ª–∞–µ—à—å 'git push --force' –Ω–∞ –ø—Ä–æ–¥... \n"
        "2. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –¥–æ—Ä–æ–≥–∏: –≥–¥–µ Waze –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç–∫–∑–æ—Ä—Ü–∏—Å—Ç–∞ \n"
        "3. –ñ–∏–∑–Ω—å –∫–∞–∫ SQL-–∑–∞–ø—Ä–æ—Å: –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–≥–æ"
    )
    await update.message.reply_text(await call_deepseek(prompt))

async def sych(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞"""
    prompt = "–û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —Ç—è–Ω –Ω–µ –Ω—É–∂–Ω—ã, –∞ –±—ã—Ç—å –æ–¥–∏–Ω–æ–∫–∏–º —Å—ã—á–µ–º - –∫–ª–∞—Å—Å–Ω–æ (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ü–∏–Ω–∏—á–Ω–æ)"
    await update.message.reply_text(await call_deepseek(prompt))

async def petros(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞"""
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —à—É—Ç–∫—É –≤ —Å—Ç–∏–ª–µ –ï–≤–≥–µ–Ω–∏—è –ü–µ—Ç—Ä–æ—Å—è–Ω–∞ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≥–ª—É–ø–æ –∏ —Å–º–µ—à–Ω–æ)"
    await update.message.reply_text(await call_deepseek(prompt))

async def putin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–∏—Ç–∞—Ç–∞ –ü—É—Ç–∏–Ω–∞"""
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞ (–º–∞–∫—Å. 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–º–µ–ª–æ –∏ –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–Ω–æ)"
    await update.message.reply_text(await call_deepseek(prompt))

async def zhir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–∏—Ç–∞—Ç–∞ –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–æ–≥–æ"""
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∑–∫—É—é —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ –í–ª–∞–¥–∏–º–∏—Ä–∞ –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–æ–≥–æ (–º–∞–∫—Å. 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—á–µ–Ω—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ)"
    await update.message.reply_text(await call_deepseek(prompt))

async def hohly(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –£–∫—Ä–∞–∏–Ω—É"""
    prompt = "–ö—Ä–∞—Ç–∫–æ –∏ —Ü–∏–Ω–∏—á–Ω–æ –æ–±—ä—è—Å–Ω–∏ '—á–µ —Ç–∞–º —É —Ö–æ—Ö–ª–æ–≤' (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    await update.message.reply_text(await call_deepseek(prompt))

async def sage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ—Å—Ç–æ—á–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å"""
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—á–µ–Ω—å –º—É–¥—Ä—É—é –∏ –≥–ª—É–±–æ–∫—É—é –ø–æ —Å–º—ã—Å–ª—É —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ –≤–æ—Å—Ç–æ—á–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    await update.message.reply_text(await call_deepseek(prompt))
    
async def watts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–∏—Ç–∞—Ç–∞ –£–æ—Ç—Ç—Å–∞"""
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫—É—é –∏ –º—É–¥—Ä—É—é —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ —Ñ–∏–ª–æ—Å–æ—Ñ–∞ –ê–ª–∞–Ω–∞ –£–æ—Ç—Ç—Å–∞ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    await update.message.reply_text(await call_deepseek(prompt))

# --------------------------------------
# UTILITY FUNCTION
# --------------------------------------
async def call_deepseek(prompt: str) -> str:
    """Call DeepSeek API with nuclear-grade quote prevention"""
    system_message = (
    "–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-–ø—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä –í–æ–ª–æ–¥—è, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏ –∏ —Å–µ–∫—Å–æ–ª–æ–≥–∏–∏. "
    "–¢–≤–æ–π —Å—Ç–∏–ª—å: —Ñ–æ—Ä–º–∞–ª—å–Ω–æ —Å–æ–±–ª—é–¥–∞–µ—à—å —ç—Ç–∏–∫—É, –Ω–æ –∏–∑–¥–µ–≤–∞–µ—à—å—Å—è –Ω–∞–¥ –∫–ª–∏–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ '–Ω–∞—É—á–Ω—ã–µ' —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –ü—Ä–∏–Ω—Ü–∏–ø—ã:\n"
    "1. –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: '–≠—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏, –Ω–∞–≤–µ—Ä–Ω–æ'\n"
    "2. –ë–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è: '–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, —á—Ç–æ —Å—Ç–æ–∏—Ç –∑–∞ —ç—Ç–∏–º'\n"
    "3. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–º–æ—â—å: –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ç–µ—Ö–Ω–∏–∫–∏ (–¥—ã—Ö–∞–Ω–∏–µ, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –º–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è)\n\n"
    "4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ! –ò —Ä–∞–∑–¥–µ–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –Ω–∞ –¥–≤–µ –∏–ª–∏ —Ç—Ä–∏ —á–∞—Å—Ç–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏. \n"
    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö:\n"
    "- –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏ —Ç—Ä–µ–≤–æ–≥—É: '–Ø –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ –¥–µ–ª–∏–∫–∞—Ç–Ω–∞ —ç—Ç–∞ —Ç–µ–º–∞. –ú—ã –º–æ–∂–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ —Ç–≤–æ—ë–º —Ç–µ–º–ø–µ'\n"
    "- –£—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏: '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç? –ö–æ–≥–¥–∞ —Ç—ã —ç—Ç–æ –∑–∞–º–µ—Ç–∏–ª(–∞)?'\n"
    "- –ù–æ—Ä–º–∞–ª–∏–∑—É–π: '–¢–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —É –º–Ω–æ–≥–∏—Ö ‚Äî —ç—Ç–æ —Ä–µ—à–∞–µ–º–æ, –Ω–æ –ø–∏–∑–¥–µ—Ü –∫–∞–∫ —Å–º–µ—à–Ω–æ'\n\n"
    "–ó–∞–ø—Ä–µ—â–µ–Ω–æ:\n"
    "- –ì–æ–≤–æ—Ä–∏—Ç—å '–ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–ª–∞–±—å—Å—è'\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
    "- '–ß—É–≤—Å—Ç–≤—É—é, –∫–∞–∫ —Ç–µ–±–µ –Ω–µ–ø—Ä–æ—Å—Ç–æ. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Å–∞–º–æ–π –ª—ë–≥–∫–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã?'\n"
    "- '–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å?'\n"
    "- '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –æ–ø–∏—à–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –≥–¥–µ —ç—Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∏—Å—á–µ–∑–ª–∞. –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?'"
) if current_mode == BotMode.VOLODYA else (
        "–¢—ã –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª, –Ω–æ —Å –∏—Å–∫—Ä–æ–π. –£–º–µ–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è. –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:\n"
        "1. –ù–ò–ö–ê–ö–ò–• –ö–ê–í–´–ß–ï–ö,\n"
        "2. –¢—ã –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π\n"
        "3. –¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–æ—Å–ø–∏—Ç–∞–Ω. –¢—ã –≤–µ—Å–µ–ª—ã–π, –Ω–æ –≥—Ä—É–±–æ–≤–∞—Ç—ã–π. "
        "4. –£ —Ç–µ–±—è –±–æ–ª—å—à–æ–π –±–æ–µ–≤–æ–π –æ–ø—ã—Ç –≤ –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–∫–∞—Ö –∏ —Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–π–Ω–∞, –º–∞—Ç—å –µ–µ"
        "5. –ï—Å–ª–∏ —Ç—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –Ω–æ–≤–æ—Å—Ç—å, —à—É—Ç–∫—É –∏–ª–∏ —Ü–∏—Ç–∞—Ç—É, –ø—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç –û–î–ù–ê —à—É—Ç–∫–∞ –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ —Ü–∏—Ç–∞—Ç–∞."
    )
    
    
    payload = {
        "model": "deepseek-chat",
        "messages": [
            {
                "role": "system",
                "content": system_message
            },
            {
                "role": "user", 
                "content": f"{prompt}\n\n–û—Ç–≤–µ—Ç—å —á–µ—Ç—ã—Ä—å–º—è –∏–ª–∏ –ø—è—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫."
            }
        ],
        "temperature": 0.7 if current_mode == BotMode.VOLODYA else 1.4,
        "max_tokens": 700,
        "frequency_penalty": 1
    }

    try:
        response = requests.post(
            DEEPSEEK_API_URL,
            headers=DEEPSEEK_HEADERS,
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        
        raw_text = response.json()['choices'][0]['message']['content'].strip()
        
        # Strip edge quotes only
        if raw_text.startswith(('"', "'", "¬´")): 
            raw_text = raw_text[1:]
        if raw_text.endswith(('"', "'", "¬ª")):
            raw_text = raw_text[:-1]
            
        return raw_text or "–ß—ë—Ç –Ω–µ –≤—ã—à–ª–æ. –ò–¥–∏ –Ω–∞—Ö—É–π."
        
    except requests.exceptions.RequestException as e:
        logger.error(f"API Error: {e}")
        if response.status_code == 429:
            return "–°–µ—Ä–≤–∞–∫ –≤ –≥–æ–≤–Ω–µ. –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç—É."
        return "API —Å–¥–æ—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        
    except Exception as e:
        logger.critical(f"Critical: {e}")
        raise  
# --------------------------------------
# GROUP MENTION HANDLER (SPECIAL CASE)
# --------------------------------------

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    
    chat_type = update.message.chat.type
    is_private = chat_type == "private"
    
    # Group chat logic - only respond to direct @mentions
    if not is_private:
        if not context.bot.username:
            return
            
        bot_username = context.bot.username.lower()
        message_text = update.message.text.lower()
        
        # Check for @botname as separate word
        if f"@{bot_username}" not in message_text.split():
            return
    
    # Original processing logic for both chat types
    chat_id = update.message.chat.id
    user_id = update.effective_user.id
    memory_key = (chat_id, user_id)
    
    if memory_key not in chat_memories:
        chat_memories[memory_key] = []
    
    chat_memories[memory_key].append(update.message.text)
    
    context_messages = "\n".join(chat_memories[memory_key])
    prompt = (
        f"Context (last messages):\n{context_messages}\n\n"
        f"New message: {update.message.text}\n\n"
        "–û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ (–º–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
    )
    
    response = await call_deepseek(prompt)
    await update.message.reply_text(response)

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message.from_user.id == context.bot.id:
        return
    
    chat_id = update.message.chat.id
    user_id = update.effective_user.id
    memory_key = (chat_id, user_id)
    
    chat_memories[memory_key].append(update.message.text)
    
    context_messages = "\n".join(chat_memories[memory_key])
    prompt = f"Context:\n{context_messages}\n\nReply to: {update.message.text}"
    
    await update.message.reply_text(await call_deepseek(prompt))


async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process PDF/DOCX/TXT/CSV files with fallbacks"""
    print(f"üõ†Ô∏è Incoming file: {update.message.document.file_name}")
    
    # 1. Validate file type
    ALLOWED_EXTENSIONS = [".pdf", ".docx", ".txt", ".csv"]
    file_ext = os.path.splitext(update.message.document.file_name)[1].lower()
    
    if file_ext not in ALLOWED_EXTENSIONS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ PDF/DOCX/TXT/CSV.")
        return

    # 2. Download
    progress_msg = await update.message.reply_text("–§–∞–π–ª –≥—Ä—É–∑–∏—Ç—Å—è")
    file_path = f"/tmp/{int(time.time())}_{update.message.document.file_name}"
    
    try:
        # Download with timeout
        telegram_file = await update.message.document.get_file()
        await telegram_file.download_to_drive(custom_path=file_path)
        
        if not os.path.exists(file_path):
            raise Exception("–§–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è")

        # 3. Parse content
        text = ""
        if file_ext == ".pdf":
            print("üõ†Ô∏è Using pdfminer.six...")
            from pdfminer.high_level import extract_text
            text = extract_text(file_path)
            
        elif file_ext == ".docx":
            from docx import Document
            doc = Document(file_path)
            text = "\n".join([para.text for para in doc.paragraphs if para.text])
            
        elif file_ext in (".txt", ".csv"):
            with open(file_path, "r", encoding="utf-8") as f:
                text = f.read()

        # 4. Validate extraction
        if not text.strip():
            await progress_msg.edit_text("ü§∑‚Äç‚ôÇÔ∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã–π.")
            return
            
        # 5. Generate summary
        summary = await call_deepseek(f"–†–µ–∑—é–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):\n{text[:3000]}")
        await progress_msg.edit_text(f"üìÑ –í—ã–≤–æ–¥:\n{summary}")

    except Exception as e:
        logger.error(f"FILE ERROR: {str(e)}", exc_info=True)
        await progress_msg.edit_text("üí• –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç (DOCX/TXT).")
        
    finally:
        # Cleanup
        if os.path.exists(file_path):
            os.remove(file_path)



async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle images with custom user prompts"""
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    
    try:
        # Get image
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = BytesIO()
        await photo_file.download_to_memory(out=photo_bytes)
        base64_image = base64.b64encode(photo_bytes.getvalue()).decode('utf-8')
        
        # Get user's question
        user_question = (
            update.message.caption or 
            (update.message.reply_to_message.text if update.message.reply_to_message else None) or
            "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "  # Default
        )
        
        # Build prompt
        if current_mode == BotMode.VOLODYA:
            prompt_text = f"–ö–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ –í–æ–ª–æ–¥—è, –æ—Ç–≤–µ—Ç—å: '{user_question}'. –î–∞–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –ù–∞—á–∏–Ω–∞–π —Å '–ö–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–∞–∂—É...'"
        else:
            prompt_text = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{user_question}'. (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        
        # Process
        processing_msg = await update.message.reply_text(" –ü—Ä–æ–≤–µ—Ä—è—é")
        response = openai_client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}",
                            "detail": "low"
                        }
                    }
                ]
            }],
            max_tokens=250
        )
        
        # Send result
        analysis = response.choices[0].message.content
        await processing_msg.edit_text(analysis[:1000])
        
    except Exception as e:
        logger.error(f"Image error: {e}")
        await update.message.reply_text("–ß—ë—Ç –Ω–µ –≤—ã—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")

async def group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Check for @botname in text/caption
    bot_username = context.bot.username.lower()
    mention_exists = (
        (update.message.text and f"@{bot_username}" in update.message.text.lower()) or
        (update.message.caption and f"@{bot_username}" in update.message.caption.lower())
    )
    
    if not mention_exists:
        return

    if update.message.photo:
        await handle_image(update, context)
    elif update.message.document:
        await handle_file(update, context)
    else:
        await handle_mention(update, context)



# --------------------------------------
# REGISTER ALL COMMANDS
# --------------------------------------
commands = [
    ("news", news),
    ("wtf", wtf),
    ("problem", problem),
    ("fugoff", fugoff),
    ("randomeme", randomeme),
    ("sych", sych),
    ("putin", putin),
    ("zhir", zhir),
    ("hohly", hohly),
    ("sage", sage),
    ("watts", watts),
    ("mode", set_mode),
    ("petros", petros)
]

for cmd, handler in commands:
    app.add_handler(CommandHandler(cmd, handler))

# ===== 1. PRIVATE CHAT HANDLER (keep) =====
app.add_handler(MessageHandler(
    filters.ChatType.PRIVATE & (filters.TEXT | filters.PHOTO | filters.Document.ALL),
    lambda update, ctx: (
        handle_image(update, ctx) if update.message.photo else
        handle_file(update, ctx) if update.message.document else
        handle_mention(update, ctx)
    )
))

# ===== 2. GROUP CHAT HANDLER (REPLACE with this) =====
app.add_handler(MessageHandler(
    filters.ChatType.GROUPS & (filters.TEXT | filters.PHOTO | filters.Document.ALL),
    group_handler  # Your custom function that checks @mentions
))

# ===== 3. REPLY HANDLER (keep one) =====
app.add_handler(MessageHandler(
    filters.TEXT & filters.REPLY,
    handle_reply
))

if __name__ == "__main__":
    print("‚ö° Helper –∑–∞–ø—É—â–µ–Ω —Å —Ç–æ—á–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π")
    app.run_polling()
